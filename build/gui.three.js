(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.GUITHREE = {})));
}(this, (function (exports) { 'use strict';

	function Object3D(name, gui, object3D, folder = true, changeMethod = null) {
	  this.o = object3D;
	  this.changeMethod = (changeMethod == null) ? function() {} : changeMethod;

	  this.f = gui.addFolder(name);
	  if (folder) this.f.open();

	  this.f.add(this.o.position, 'x', -2, 2)
	  .step(0.1)
	  .name('pos_x')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.position, 'y', -2, 2)
	  .step(0.1)
	  .name('pos_y')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.position, 'z', -2, 2)
	  .step(0.1)
	  .name('pos_z')
	  .onChange(()=> {
	    this.changeMethod();
	  });

	  this.f.add(this.o.rotation, 'x', -Math.PI, Math.PI)
	  .step(0.01)
	  .name('rot_x')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.rotation, 'y', -Math.PI, Math.PI)
	  .step(0.01)
	  .name('rot_y')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.rotation, 'z', -Math.PI, Math.PI)
	  .step(0.01)
	  .name('rot_z')
	  .onChange(()=> {
	    this.changeMethod();
	  });

	  this.f.add(this.o.scale, 'x', 0.1, 5)
	  .step(0.1)
	  .name('sca_x')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.scale, 'y', 0.1, 5)
	  .step(0.1)
	  .name('sca_y')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.scale, 'z', 0.1, 5)
	  .step(0.1)
	  .name('sca_z')
	  .onChange(()=> {
	    this.changeMethod();
	  });

	}

	function Uniforms(name, gui, uniforms, folder = true, changeMethod = null) {
	  this.u = uniforms;
	  this.changeMethod = (changeMethod == null) ? function() {} : changeMethod;

	  this.f = gui.addFolder(name);
	  if (folder) this.f.open();

	  for (var key in this.u) {
	    this.addPrm(key);
	  }
	}


	Uniforms.prototype = {
	  addPrm: function(key) {
	    var o, type = this.u[key].type;

	    if (!this.validation(this.u[key].options)) return;

	    switch (type) {
	      case 'bool': {
	        o = this.setOps(key, this.u[key].value, 0);
	        this.f.add(this.u[key], 'value')
	        .name(o.name);
	        break;
	      }
	      case 'c': {
	        o = this.setOps(key, this.u[key].value, 0);
	        this.u[key].tValue = this.u[key].value.clone();
	        this.u[key].tValue.r = this.u[key].tValue.r * 255;
	        this.u[key].tValue.g = this.u[key].tValue.g * 255;
	        this.u[key].tValue.b = this.u[key].tValue.b * 255;
	        this.f.addColor(this.u[key], 'tValue')
	        .name(o.name)
	        .onChange(()=> {
	          this.u[key].value = {
	            r: this.u[key].tValue.r / 255,
	            g: this.u[key].tValue.g / 255,
	            b: this.u[key].tValue.b / 255,
	          };
	          this.changeMethod();
	        });
	        break;
	      }
	      case 'v2': {
	        o = this.setOps(key, this.u[key].value[0]);
	        this.f.add(this.u[key].value, 0, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_x')
	        .onChange(()=> {
	          this.changeMethod();
	        });

	        o = this.setOps(key, this.u[key].value[1]);
	        this.f.add(this.u[key].value, 1, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_y')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        break;
	      }
	      case 'v3': {
	        o = this.setOps(key, this.u[key].value[0]);
	        this.f.add(this.u[key].value, 0, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_x')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        o = this.setOps(key, this.u[key].value[1]);
	        this.f.add(this.u[key].value, 1, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_y')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        o = this.setOps(key, this.u[key].value[2]);
	        this.f.add(this.u[key].value, 2, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_z')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        break;
	      }
	      case 'v4': {
	        o = this.setOps(key, this.u[key].value[0]);
	        this.f.add(this.u[key].value, 0, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_x')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        o = this.setOps(key, this.u[key].value[1]);
	        this.f.add(this.u[key].value, 1, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_y')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        o = this.setOps(key, this.u[key].value[2]);
	        this.f.add(this.u[key].value, 2, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_z')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        o = this.setOps(key, this.u[key].value[3]);
	        this.f.add(this.u[key].value, 3, o.min, o.max)
	        .step(o.step)
	        .name(o.name + '_w')
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        break;
	      }
	      case 'i': {
	        o = this.setOps(key, this.u[key].value);
	        this.f.add(this.u[key], 'value', o.min, o.max)
	        .step(o.step)
	        .name(o.name)
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        break;
	      }
	      case 'f': {
	        o = this.setOps(key, this.u[key].value);
	        this.f.add(this.u[key], 'value', o.min, o.max)
	        .step(o.step)
	        .name(o.name)
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        break;
	      }
	      default:
	    }
	  },

	  setOps: function(key, value) {
	    var ops = (this.u[key].options === undefined) ? {} : this.u[key].options;
	    return {
	      min:  (ops.min === undefined) ? value * 0.5 : ops.min,
	      max:  (ops.max === undefined) ? value * 10 : ops.max,
	      step: (ops.step === undefined) ? 0.1 : ops.step,
	      name: (ops.name === undefined) ? key : ops.name,
	    };
	  },

	  validation: function(op) {
	    if (op === undefined) {
	      return true;
	    }

	    if (op.visible === false) {
	      return false;
	    }

	    if (op.max < op.min) {
	      console.error('Error: options max < min.');
	      return false;
	    }

	    if (op.max < op.step) {
	      console.error('Error: options max < step.');
	      return false;
	    }

	    return true;
	  },
	};

	exports.Object3D = Object3D;
	exports.Uniforms = Uniforms;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpLnRocmVlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvb2JqZWN0M0QvT2JqZWN0M0QuanMiLCIuLi9zcmMvdW5pZm9ybXMvVW5pZm9ybXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gT2JqZWN0M0QobmFtZSwgZ3VpLCBvYmplY3QzRCwgZm9sZGVyID0gdHJ1ZSwgY2hhbmdlTWV0aG9kID0gbnVsbCkge1xuICB0aGlzLm8gPSBvYmplY3QzRDtcbiAgdGhpcy5jaGFuZ2VNZXRob2QgPSAoY2hhbmdlTWV0aG9kID09IG51bGwpID8gZnVuY3Rpb24oKSB7fSA6IGNoYW5nZU1ldGhvZDtcblxuICB0aGlzLmYgPSBndWkuYWRkRm9sZGVyKG5hbWUpO1xuICBpZiAoZm9sZGVyKSB0aGlzLmYub3BlbigpO1xuXG4gIHRoaXMuZi5hZGQodGhpcy5vLnBvc2l0aW9uLCAneCcsIC0yLCAyKVxuICAuc3RlcCgwLjEpXG4gIC5uYW1lKCdwb3NfeCcpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcbiAgdGhpcy5mLmFkZCh0aGlzLm8ucG9zaXRpb24sICd5JywgLTIsIDIpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3Bvc195JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuICB0aGlzLmYuYWRkKHRoaXMuby5wb3NpdGlvbiwgJ3onLCAtMiwgMilcbiAgLnN0ZXAoMC4xKVxuICAubmFtZSgncG9zX3onKVxuICAub25DaGFuZ2UoKCk9PiB7XG4gICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgfSk7XG5cbiAgdGhpcy5mLmFkZCh0aGlzLm8ucm90YXRpb24sICd4JywgLU1hdGguUEksIE1hdGguUEkpXG4gIC5zdGVwKDAuMDEpXG4gIC5uYW1lKCdyb3RfeCcpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcbiAgdGhpcy5mLmFkZCh0aGlzLm8ucm90YXRpb24sICd5JywgLU1hdGguUEksIE1hdGguUEkpXG4gIC5zdGVwKDAuMDEpXG4gIC5uYW1lKCdyb3RfeScpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcbiAgdGhpcy5mLmFkZCh0aGlzLm8ucm90YXRpb24sICd6JywgLU1hdGguUEksIE1hdGguUEkpXG4gIC5zdGVwKDAuMDEpXG4gIC5uYW1lKCdyb3RfeicpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcblxuICB0aGlzLmYuYWRkKHRoaXMuby5zY2FsZSwgJ3gnLCAwLjEsIDUpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3NjYV94JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuICB0aGlzLmYuYWRkKHRoaXMuby5zY2FsZSwgJ3knLCAwLjEsIDUpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3NjYV95JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuICB0aGlzLmYuYWRkKHRoaXMuby5zY2FsZSwgJ3onLCAwLjEsIDUpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3NjYV96JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuXG59XG5cbmV4cG9ydCB7IE9iamVjdDNEIH07XG4iLCJmdW5jdGlvbiBVbmlmb3JtcyhuYW1lLCBndWksIHVuaWZvcm1zLCBmb2xkZXIgPSB0cnVlLCBjaGFuZ2VNZXRob2QgPSBudWxsKSB7XG4gIHRoaXMudSA9IHVuaWZvcm1zO1xuICB0aGlzLmNoYW5nZU1ldGhvZCA9IChjaGFuZ2VNZXRob2QgPT0gbnVsbCkgPyBmdW5jdGlvbigpIHt9IDogY2hhbmdlTWV0aG9kO1xuXG4gIHRoaXMuZiA9IGd1aS5hZGRGb2xkZXIobmFtZSk7XG4gIGlmIChmb2xkZXIpIHRoaXMuZi5vcGVuKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIHRoaXMudSkge1xuICAgIHRoaXMuYWRkUHJtKGtleSk7XG4gIH1cbn1cblxuXG5Vbmlmb3Jtcy5wcm90b3R5cGUgPSB7XG4gIGFkZFBybTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIG8sIHR5cGUgPSB0aGlzLnVba2V5XS50eXBlO1xuXG4gICAgaWYgKCF0aGlzLnZhbGlkYXRpb24odGhpcy51W2tleV0ub3B0aW9ucykpIHJldHVybjtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYm9vbCc6IHtcbiAgICAgICAgbyA9IHRoaXMuc2V0T3BzKGtleSwgdGhpcy51W2tleV0udmFsdWUsIDApO1xuICAgICAgICB0aGlzLmYuYWRkKHRoaXMudVtrZXldLCAndmFsdWUnKVxuICAgICAgICAubmFtZShvLm5hbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH07XG4gICAgICBjYXNlICdjJzoge1xuICAgICAgICBvID0gdGhpcy5zZXRPcHMoa2V5LCB0aGlzLnVba2V5XS52YWx1ZSwgMCk7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZSA9IHRoaXMudVtrZXldLnZhbHVlLmNsb25lKCk7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZS5yID0gdGhpcy51W2tleV0udFZhbHVlLnIgKiAyNTU7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZS5nID0gdGhpcy51W2tleV0udFZhbHVlLmcgKiAyNTU7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZS5iID0gdGhpcy51W2tleV0udFZhbHVlLmIgKiAyNTU7XG4gICAgICAgIHRoaXMuZi5hZGRDb2xvcih0aGlzLnVba2V5XSwgJ3RWYWx1ZScpXG4gICAgICAgIC5uYW1lKG8ubmFtZSlcbiAgICAgICAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgICAgICAgIHRoaXMudVtrZXldLnZhbHVlID0ge1xuICAgICAgICAgICAgcjogdGhpcy51W2tleV0udFZhbHVlLnIgLyAyNTUsXG4gICAgICAgICAgICBnOiB0aGlzLnVba2V5XS50VmFsdWUuZyAvIDI1NSxcbiAgICAgICAgICAgIGI6IHRoaXMudVtrZXldLnRWYWx1ZS5iIC8gMjU1LFxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfTtcbiAgICAgIGNhc2UgJ3YyJzoge1xuICAgICAgICBvID0gdGhpcy5zZXRPcHMoa2V5LCB0aGlzLnVba2V5XS52YWx1ZVswXSk7XG4gICAgICAgIHRoaXMuZi5hZGQodGhpcy51W2tleV0udmFsdWUsIDAsIG8ubWluLCBvLm1heClcbiAgICAgICAgLnN0ZXAoby5zdGVwKVxuICAgICAgICAubmFtZShvLm5hbWUgKyAnX3gnKVxuICAgICAgICAub25DaGFuZ2UoKCk9PiB7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbyA9IHRoaXMuc2V0T3BzKGtleSwgdGhpcy51W2tleV0udmFsdWVbMV0pO1xuICAgICAgICB0aGlzLmYuYWRkKHRoaXMudVtrZXldLnZhbHVlLCAxLCBvLm1pbiwgby5tYXgpXG4gICAgICAgIC5zdGVwKG8uc3RlcClcbiAgICAgICAgLm5hbWUoby5uYW1lICsgJ195JylcbiAgICAgICAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgICAgICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH07XG4gICAgICBjYXNlICd2Myc6IHtcbiAgICAgICAgbyA9IHRoaXMuc2V0T3BzKGtleSwgdGhpcy51W2tleV0udmFsdWVbMF0pO1xuICAgICAgICB0aGlzLmYuYWRkKHRoaXMudVtrZXldLnZhbHVlLCAwLCBvLm1pbiwgby5tYXgpXG4gICAgICAgIC5zdGVwKG8uc3RlcClcbiAgICAgICAgLm5hbWUoby5uYW1lICsgJ194JylcbiAgICAgICAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgICAgICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBvID0gdGhpcy5zZXRPcHMoa2V5LCB0aGlzLnVba2V5XS52YWx1ZVsxXSk7XG4gICAgICAgIHRoaXMuZi5hZGQodGhpcy51W2tleV0udmFsdWUsIDEsIG8ubWluLCBvLm1heClcbiAgICAgICAgLnN0ZXAoby5zdGVwKVxuICAgICAgICAubmFtZShvLm5hbWUgKyAnX3knKVxuICAgICAgICAub25DaGFuZ2UoKCk9PiB7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG8gPSB0aGlzLnNldE9wcyhrZXksIHRoaXMudVtrZXldLnZhbHVlWzJdKTtcbiAgICAgICAgdGhpcy5mLmFkZCh0aGlzLnVba2V5XS52YWx1ZSwgMiwgby5taW4sIG8ubWF4KVxuICAgICAgICAuc3RlcChvLnN0ZXApXG4gICAgICAgIC5uYW1lKG8ubmFtZSArICdfeicpXG4gICAgICAgIC5vbkNoYW5nZSgoKT0+IHtcbiAgICAgICAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9O1xuICAgICAgY2FzZSAndjQnOiB7XG4gICAgICAgIG8gPSB0aGlzLnNldE9wcyhrZXksIHRoaXMudVtrZXldLnZhbHVlWzBdKTtcbiAgICAgICAgdGhpcy5mLmFkZCh0aGlzLnVba2V5XS52YWx1ZSwgMCwgby5taW4sIG8ubWF4KVxuICAgICAgICAuc3RlcChvLnN0ZXApXG4gICAgICAgIC5uYW1lKG8ubmFtZSArICdfeCcpXG4gICAgICAgIC5vbkNoYW5nZSgoKT0+IHtcbiAgICAgICAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgbyA9IHRoaXMuc2V0T3BzKGtleSwgdGhpcy51W2tleV0udmFsdWVbMV0pO1xuICAgICAgICB0aGlzLmYuYWRkKHRoaXMudVtrZXldLnZhbHVlLCAxLCBvLm1pbiwgby5tYXgpXG4gICAgICAgIC5zdGVwKG8uc3RlcClcbiAgICAgICAgLm5hbWUoby5uYW1lICsgJ195JylcbiAgICAgICAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgICAgICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBvID0gdGhpcy5zZXRPcHMoa2V5LCB0aGlzLnVba2V5XS52YWx1ZVsyXSk7XG4gICAgICAgIHRoaXMuZi5hZGQodGhpcy51W2tleV0udmFsdWUsIDIsIG8ubWluLCBvLm1heClcbiAgICAgICAgLnN0ZXAoby5zdGVwKVxuICAgICAgICAubmFtZShvLm5hbWUgKyAnX3onKVxuICAgICAgICAub25DaGFuZ2UoKCk9PiB7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG8gPSB0aGlzLnNldE9wcyhrZXksIHRoaXMudVtrZXldLnZhbHVlWzNdKTtcbiAgICAgICAgdGhpcy5mLmFkZCh0aGlzLnVba2V5XS52YWx1ZSwgMywgby5taW4sIG8ubWF4KVxuICAgICAgICAuc3RlcChvLnN0ZXApXG4gICAgICAgIC5uYW1lKG8ubmFtZSArICdfdycpXG4gICAgICAgIC5vbkNoYW5nZSgoKT0+IHtcbiAgICAgICAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9O1xuICAgICAgY2FzZSAnaSc6IHtcbiAgICAgICAgbyA9IHRoaXMuc2V0T3BzKGtleSwgdGhpcy51W2tleV0udmFsdWUpO1xuICAgICAgICB0aGlzLmYuYWRkKHRoaXMudVtrZXldLCAndmFsdWUnLCBvLm1pbiwgby5tYXgpXG4gICAgICAgIC5zdGVwKG8uc3RlcClcbiAgICAgICAgLm5hbWUoby5uYW1lKVxuICAgICAgICAub25DaGFuZ2UoKCk9PiB7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfTtcbiAgICAgIGNhc2UgJ2YnOiB7XG4gICAgICAgIG8gPSB0aGlzLnNldE9wcyhrZXksIHRoaXMudVtrZXldLnZhbHVlKTtcbiAgICAgICAgdGhpcy5mLmFkZCh0aGlzLnVba2V5XSwgJ3ZhbHVlJywgby5taW4sIG8ubWF4KVxuICAgICAgICAuc3RlcChvLnN0ZXApXG4gICAgICAgIC5uYW1lKG8ubmFtZSlcbiAgICAgICAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgICAgICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH07XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICBzZXRPcHM6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgb3BzID0gKHRoaXMudVtrZXldLm9wdGlvbnMgPT09IHVuZGVmaW5lZCkgPyB7fSA6IHRoaXMudVtrZXldLm9wdGlvbnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbjogIChvcHMubWluID09PSB1bmRlZmluZWQpID8gdmFsdWUgKiAwLjUgOiBvcHMubWluLFxuICAgICAgbWF4OiAgKG9wcy5tYXggPT09IHVuZGVmaW5lZCkgPyB2YWx1ZSAqIDEwIDogb3BzLm1heCxcbiAgICAgIHN0ZXA6IChvcHMuc3RlcCA9PT0gdW5kZWZpbmVkKSA/IDAuMSA6IG9wcy5zdGVwLFxuICAgICAgbmFtZTogKG9wcy5uYW1lID09PSB1bmRlZmluZWQpID8ga2V5IDogb3BzLm5hbWUsXG4gICAgfTtcbiAgfSxcblxuICB2YWxpZGF0aW9uOiBmdW5jdGlvbihvcCkge1xuICAgIGlmIChvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob3AudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3AubWF4IDwgb3AubWluKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjogb3B0aW9ucyBtYXggPCBtaW4uJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG9wLm1heCA8IG9wLnN0ZXApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiBvcHRpb25zIG1heCA8IHN0ZXAuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG59XG5cbmV4cG9ydCB7IFVuaWZvcm1zIH07XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0NBQUEsU0FBUyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxHQUFHLElBQUksRUFBRSxZQUFZLEdBQUcsSUFBSSxFQUFFO0NBQzNFLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7Q0FDcEIsRUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsWUFBWSxJQUFJLElBQUksSUFBSSxXQUFXLEVBQUUsR0FBRyxZQUFZLENBQUM7O0NBRTVFLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQy9CLEVBQUUsSUFBSSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7Q0FFNUIsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3pDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztDQUNaLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUNoQixHQUFHLFFBQVEsQ0FBQyxLQUFLO0NBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3hCLEdBQUcsQ0FBQyxDQUFDO0NBQ0wsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3pDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztDQUNaLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUNoQixHQUFHLFFBQVEsQ0FBQyxLQUFLO0NBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3hCLEdBQUcsQ0FBQyxDQUFDO0NBQ0wsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3pDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztDQUNaLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUNoQixHQUFHLFFBQVEsQ0FBQyxLQUFLO0NBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3hCLEdBQUcsQ0FBQyxDQUFDOztDQUVMLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO0NBQ3JELEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztDQUNiLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUNoQixHQUFHLFFBQVEsQ0FBQyxLQUFLO0NBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3hCLEdBQUcsQ0FBQyxDQUFDO0NBQ0wsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7Q0FDckQsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0NBQ2IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0NBQ2hCLEdBQUcsUUFB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LElBQUk7Q0FDaEIsTUFBTSxLQUFLLE1BQU0sRUFBRTtDQUNuQixRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNuRCxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDO0NBQ3hDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN0QixRQUFRLE1BQU07Q0FDZCxPQUFPLEFBQUM7Q0FDUixNQUFNLEtBQUssR0FBRyxFQUFFO0NBQ2hCLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDdkQsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztDQUMxRCxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0NBQzFELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFD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UyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztDQUNyQixTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztDQUM1QixTQUFTLFFBQVEsQ0FBQyxLQUFLO0NBQ3ZCLFVBQVUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzlCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNuRCxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7Q0FDdEQsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztDQUNyQixTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztDQUM1QixTQUFTLFFBQVEsQ0FBQyxLQUFLO0NBQ3ZCLFVBQVUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzlCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNuRCxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7Q0FDdEQsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztDQUNyQixTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztDQUM1QixTQUFTLFFBQVEsQ0FBQyxLQUFLO0NBQ3ZCLFVBQVUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzlCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNO0NBQ2QsT0FBTyxBQUFDO0NBQ1IsTUFBTSxLQUFLLElBQUksRUFBRTtDQUNqQixRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztDQUN0RCxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQ3JCLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQzVCLFNBQVMsUUFBUSxDQUFDLEtBQUs7Q0FDdkIsVUFBVSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDOUIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztDQUN0RCxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQ3JCLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQzVCLFNBQVMsUUFBUSxDQUFDLEtBQUs7Q0FDdkIsVUFBVSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDOUIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztDQUN0RCxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQ3JCLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQzVCLFNBQVMsUUFBUSxDQUFDLEtBQUs7Q0FDdkIsVUFBVSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDOUIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztDQUN0RCxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQ3JCLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQzVC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
