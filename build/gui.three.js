(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.GUITHREE = {})));
}(this, (function (exports) { 'use strict';

	function Object3D(name, gui, object3D, folder = true, changeMethod = null) {
	  this.o = object3D;
	  this.changeMethod = (changeMethod == null) ? function() {} : changeMethod;

	  this.f = gui.addFolder(name);
	  if (folder) this.f.open();

	  this.f.add(this.o.position, 'x', -2, 2)
	  .step(0.1)
	  .name('pos_x')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.position, 'y', -2, 2)
	  .step(0.1)
	  .name('pos_y')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.position, 'z', -2, 2)
	  .step(0.1)
	  .name('pos_z')
	  .onChange(()=> {
	    this.changeMethod();
	  });

	  this.f.add(this.o.rotation, 'x', -Math.PI, Math.PI)
	  .step(0.01)
	  .name('rot_x')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.rotation, 'y', -Math.PI, Math.PI)
	  .step(0.01)
	  .name('rot_y')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.rotation, 'z', -Math.PI, Math.PI)
	  .step(0.01)
	  .name('rot_z')
	  .onChange(()=> {
	    this.changeMethod();
	  });

	  this.f.add(this.o.scale, 'x', 0.1, 5)
	  .step(0.1)
	  .name('sca_x')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.scale, 'y', 0.1, 5)
	  .step(0.1)
	  .name('sca_y')
	  .onChange(()=> {
	    this.changeMethod();
	  });
	  this.f.add(this.o.scale, 'z', 0.1, 5)
	  .step(0.1)
	  .name('sca_z')
	  .onChange(()=> {
	    this.changeMethod();
	  });

	}

	function Uniforms(name, gui, uniforms, folder = true, changeMethod = null) {
	  this.u = uniforms;
	  this.changeMethod = (changeMethod == null) ? function() {} : changeMethod;

	  this.f = gui.addFolder(name);
	  if (folder) this.f.open();

	  for (var key in this.u) {
	    this.addPrm(key);
	  }
	}


	Uniforms.prototype = {
	  addPrm: function(key) {
	    var o, type = this.u[key].type;

	    if (!this.validation(this.u[key].options)) return;

	    switch (type) {
	      case 'bool': {
	        o = this.setOps(key, this.u[key].value, 0);
	        this.f.add(this.u[key], 'value')
	        .name(o.name);
	        break;
	      }
	      case 'c': {
	        o = this.setOps(key, this.u[key].value, 0);
	        this.u[key].tValue = this.u[key].value.clone();
	        this.u[key].tValue.r = this.u[key].tValue.r * 255;
	        this.u[key].tValue.g = this.u[key].tValue.g * 255;
	        this.u[key].tValue.b = this.u[key].tValue.b * 255;
	        this.f.addColor(this.u[key], 'tValue')
	        .name(o.name)
	        .onChange(()=> {
	          this.u[key].value = {
	            r: this.u[key].tValue.r / 255,
	            g: this.u[key].tValue.g / 255,
	            b: this.u[key].tValue.b / 255,
	          };
	          this.changeMethod();
	        });
	        break;
	      }
	      case 'v2': {
	        this.addVector(key, 0);
	        this.addVector(key, 1);
	        break;
	      }
	      case 'v3': {
	        this.addVector(key, 0);
	        this.addVector(key, 1);
	        this.addVector(key, 2);
	        break;
	      }
	      case 'v4': {
	        this.addVector(key, 0);
	        this.addVector(key, 1);
	        this.addVector(key, 2);
	        this.addVector(key, 3);
	        break;
	      }
	      case 'i': {
	        o = this.setOps(key, this.u[key].value);
	        // セレクトかどうか判定
	        if (o.select != null) {
	          this.f.add(this.u[key], 'value', o.select)
	          .name(o.name)
	          .onChange(()=> {
	            this.changeMethod();
	          });
	        } else {
	          this.f.add(this.u[key], 'value', o.min, o.max)
	          .step(o.step)
	          .name(o.name)
	          .onChange(()=> {
	            this.changeMethod();
	          });
	        }
	        break;
	      }
	      case 'f': {
	        o = this.setOps(key, this.u[key].value);
	        this.f.add(this.u[key], 'value', o.min, o.max)
	        .step(o.step)
	        .name(o.name)
	        .onChange(()=> {
	          this.changeMethod();
	        });
	        break;
	      }
	      default:
	    }
	  },

	  setOps: function(key, value) {
	    var ops = (this.u[key].options === undefined) ? {} : this.u[key].options;
	    return {
	      min:  (ops.min === undefined) ? value * 0.5 : ops.min,
	      max:  (ops.max === undefined) ? value * 10 : ops.max,
	      step: (ops.step === undefined) ? 0.1 : ops.step,
	      name: (ops.name === undefined) ? key : ops.name,
	      select: (ops.select === undefined) ? null : ops.select,
	    };
	  },

	  addVector: function(key, index) {
	    let tKey;
	    if (index == 0) tKey = (this.u[key].value[0]) ? 0 : 'x';
	    else if (index == 1) tKey = (this.u[key].value[1]) ? 1 : 'y';
	    else if (index == 2) tKey = (this.u[key].value[2]) ? 2 : 'z';

	    const o = this.setOps(key, this.u[key].value[tKey]);
	    const nameArr = ['x', 'y', 'z'];
	    this.f.add(this.u[key].value, tKey, o.min, o.max)
	    .step(o.step)
	    .name(o.name + '_' + nameArr[index])
	    .onChange(()=> {
	      this.changeMethod();
	    });
	  },

	  validation: function(op) {
	    if (op === undefined) {
	      return true;
	    }

	    if (op.visible === false) {
	      return false;
	    }

	    if (op.max < op.min) {
	      console.error('Error: options max < min.');
	      return false;
	    }

	    if (op.max < op.step) {
	      console.error('Error: options max < step.');
	      return false;
	    }

	    return true;
	  },
	};

	exports.Object3D = Object3D;
	exports.Uniforms = Uniforms;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpLnRocmVlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvb2JqZWN0M0QvT2JqZWN0M0QuanMiLCIuLi9zcmMvdW5pZm9ybXMvVW5pZm9ybXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gT2JqZWN0M0QobmFtZSwgZ3VpLCBvYmplY3QzRCwgZm9sZGVyID0gdHJ1ZSwgY2hhbmdlTWV0aG9kID0gbnVsbCkge1xuICB0aGlzLm8gPSBvYmplY3QzRDtcbiAgdGhpcy5jaGFuZ2VNZXRob2QgPSAoY2hhbmdlTWV0aG9kID09IG51bGwpID8gZnVuY3Rpb24oKSB7fSA6IGNoYW5nZU1ldGhvZDtcblxuICB0aGlzLmYgPSBndWkuYWRkRm9sZGVyKG5hbWUpO1xuICBpZiAoZm9sZGVyKSB0aGlzLmYub3BlbigpO1xuXG4gIHRoaXMuZi5hZGQodGhpcy5vLnBvc2l0aW9uLCAneCcsIC0yLCAyKVxuICAuc3RlcCgwLjEpXG4gIC5uYW1lKCdwb3NfeCcpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcbiAgdGhpcy5mLmFkZCh0aGlzLm8ucG9zaXRpb24sICd5JywgLTIsIDIpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3Bvc195JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuICB0aGlzLmYuYWRkKHRoaXMuby5wb3NpdGlvbiwgJ3onLCAtMiwgMilcbiAgLnN0ZXAoMC4xKVxuICAubmFtZSgncG9zX3onKVxuICAub25DaGFuZ2UoKCk9PiB7XG4gICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgfSk7XG5cbiAgdGhpcy5mLmFkZCh0aGlzLm8ucm90YXRpb24sICd4JywgLU1hdGguUEksIE1hdGguUEkpXG4gIC5zdGVwKDAuMDEpXG4gIC5uYW1lKCdyb3RfeCcpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcbiAgdGhpcy5mLmFkZCh0aGlzLm8ucm90YXRpb24sICd5JywgLU1hdGguUEksIE1hdGguUEkpXG4gIC5zdGVwKDAuMDEpXG4gIC5uYW1lKCdyb3RfeScpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcbiAgdGhpcy5mLmFkZCh0aGlzLm8ucm90YXRpb24sICd6JywgLU1hdGguUEksIE1hdGguUEkpXG4gIC5zdGVwKDAuMDEpXG4gIC5uYW1lKCdyb3RfeicpXG4gIC5vbkNoYW5nZSgoKT0+IHtcbiAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICB9KTtcblxuICB0aGlzLmYuYWRkKHRoaXMuby5zY2FsZSwgJ3gnLCAwLjEsIDUpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3NjYV94JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuICB0aGlzLmYuYWRkKHRoaXMuby5zY2FsZSwgJ3knLCAwLjEsIDUpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3NjYV95JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuICB0aGlzLmYuYWRkKHRoaXMuby5zY2FsZSwgJ3onLCAwLjEsIDUpXG4gIC5zdGVwKDAuMSlcbiAgLm5hbWUoJ3NjYV96JylcbiAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gIH0pO1xuXG59XG5cbmV4cG9ydCB7IE9iamVjdDNEIH07XG4iLCJmdW5jdGlvbiBVbmlmb3JtcyhuYW1lLCBndWksIHVuaWZvcm1zLCBmb2xkZXIgPSB0cnVlLCBjaGFuZ2VNZXRob2QgPSBudWxsKSB7XG4gIHRoaXMudSA9IHVuaWZvcm1zO1xuICB0aGlzLmNoYW5nZU1ldGhvZCA9IChjaGFuZ2VNZXRob2QgPT0gbnVsbCkgPyBmdW5jdGlvbigpIHt9IDogY2hhbmdlTWV0aG9kO1xuXG4gIHRoaXMuZiA9IGd1aS5hZGRGb2xkZXIobmFtZSk7XG4gIGlmIChmb2xkZXIpIHRoaXMuZi5vcGVuKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIHRoaXMudSkge1xuICAgIHRoaXMuYWRkUHJtKGtleSk7XG4gIH1cbn1cblxuXG5Vbmlmb3Jtcy5wcm90b3R5cGUgPSB7XG4gIGFkZFBybTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIG8sIHR5cGUgPSB0aGlzLnVba2V5XS50eXBlO1xuXG4gICAgaWYgKCF0aGlzLnZhbGlkYXRpb24odGhpcy51W2tleV0ub3B0aW9ucykpIHJldHVybjtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYm9vbCc6IHtcbiAgICAgICAgbyA9IHRoaXMuc2V0T3BzKGtleSwgdGhpcy51W2tleV0udmFsdWUsIDApO1xuICAgICAgICB0aGlzLmYuYWRkKHRoaXMudVtrZXldLCAndmFsdWUnKVxuICAgICAgICAubmFtZShvLm5hbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH07XG4gICAgICBjYXNlICdjJzoge1xuICAgICAgICBvID0gdGhpcy5zZXRPcHMoa2V5LCB0aGlzLnVba2V5XS52YWx1ZSwgMCk7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZSA9IHRoaXMudVtrZXldLnZhbHVlLmNsb25lKCk7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZS5yID0gdGhpcy51W2tleV0udFZhbHVlLnIgKiAyNTU7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZS5nID0gdGhpcy51W2tleV0udFZhbHVlLmcgKiAyNTU7XG4gICAgICAgIHRoaXMudVtrZXldLnRWYWx1ZS5iID0gdGhpcy51W2tleV0udFZhbHVlLmIgKiAyNTU7XG4gICAgICAgIHRoaXMuZi5hZGRDb2xvcih0aGlzLnVba2V5XSwgJ3RWYWx1ZScpXG4gICAgICAgIC5uYW1lKG8ubmFtZSlcbiAgICAgICAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgICAgICAgIHRoaXMudVtrZXldLnZhbHVlID0ge1xuICAgICAgICAgICAgcjogdGhpcy51W2tleV0udFZhbHVlLnIgLyAyNTUsXG4gICAgICAgICAgICBnOiB0aGlzLnVba2V5XS50VmFsdWUuZyAvIDI1NSxcbiAgICAgICAgICAgIGI6IHRoaXMudVtrZXldLnRWYWx1ZS5iIC8gMjU1LFxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfTtcbiAgICAgIGNhc2UgJ3YyJzoge1xuICAgICAgICB0aGlzLmFkZFZlY3RvcihrZXksIDApO1xuICAgICAgICB0aGlzLmFkZFZlY3RvcihrZXksIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH07XG4gICAgICBjYXNlICd2Myc6IHtcbiAgICAgICAgdGhpcy5hZGRWZWN0b3Ioa2V5LCAwKTtcbiAgICAgICAgdGhpcy5hZGRWZWN0b3Ioa2V5LCAxKTtcbiAgICAgICAgdGhpcy5hZGRWZWN0b3Ioa2V5LCAyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9O1xuICAgICAgY2FzZSAndjQnOiB7XG4gICAgICAgIHRoaXMuYWRkVmVjdG9yKGtleSwgMCk7XG4gICAgICAgIHRoaXMuYWRkVmVjdG9yKGtleSwgMSk7XG4gICAgICAgIHRoaXMuYWRkVmVjdG9yKGtleSwgMik7XG4gICAgICAgIHRoaXMuYWRkVmVjdG9yKGtleSwgMyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfTtcbiAgICAgIGNhc2UgJ2knOiB7XG4gICAgICAgIG8gPSB0aGlzLnNldE9wcyhrZXksIHRoaXMudVtrZXldLnZhbHVlKTtcbiAgICAgICAgLy8g44K744Os44Kv44OI44GL44Gp44GG44GL5Yik5a6aXG4gICAgICAgIGlmIChvLnNlbGVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5mLmFkZCh0aGlzLnVba2V5XSwgJ3ZhbHVlJywgby5zZWxlY3QpXG4gICAgICAgICAgLm5hbWUoby5uYW1lKVxuICAgICAgICAgIC5vbkNoYW5nZSgoKT0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTWV0aG9kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5mLmFkZCh0aGlzLnVba2V5XSwgJ3ZhbHVlJywgby5taW4sIG8ubWF4KVxuICAgICAgICAgIC5zdGVwKG8uc3RlcClcbiAgICAgICAgICAubmFtZShvLm5hbWUpXG4gICAgICAgICAgLm9uQ2hhbmdlKCgpPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VNZXRob2QoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH07XG4gICAgICBjYXNlICdmJzoge1xuICAgICAgICBvID0gdGhpcy5zZXRPcHMoa2V5LCB0aGlzLnVba2V5XS52YWx1ZSk7XG4gICAgICAgIHRoaXMuZi5hZGQodGhpcy51W2tleV0sICd2YWx1ZScsIG8ubWluLCBvLm1heClcbiAgICAgICAgLnN0ZXAoby5zdGVwKVxuICAgICAgICAubmFtZShvLm5hbWUpXG4gICAgICAgIC5vbkNoYW5nZSgoKT0+IHtcbiAgICAgICAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9O1xuICAgICAgZGVmYXVsdDoge1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0T3BzOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdmFyIG9wcyA9ICh0aGlzLnVba2V5XS5vcHRpb25zID09PSB1bmRlZmluZWQpID8ge30gOiB0aGlzLnVba2V5XS5vcHRpb25zO1xuICAgIHJldHVybiB7XG4gICAgICBtaW46ICAob3BzLm1pbiA9PT0gdW5kZWZpbmVkKSA/IHZhbHVlICogMC41IDogb3BzLm1pbixcbiAgICAgIG1heDogIChvcHMubWF4ID09PSB1bmRlZmluZWQpID8gdmFsdWUgKiAxMCA6IG9wcy5tYXgsXG4gICAgICBzdGVwOiAob3BzLnN0ZXAgPT09IHVuZGVmaW5lZCkgPyAwLjEgOiBvcHMuc3RlcCxcbiAgICAgIG5hbWU6IChvcHMubmFtZSA9PT0gdW5kZWZpbmVkKSA/IGtleSA6IG9wcy5uYW1lLFxuICAgICAgc2VsZWN0OiAob3BzLnNlbGVjdCA9PT0gdW5kZWZpbmVkKSA/IG51bGwgOiBvcHMuc2VsZWN0LFxuICAgIH07XG4gIH0sXG5cbiAgYWRkVmVjdG9yOiBmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgbGV0IHRLZXk7XG4gICAgaWYgKGluZGV4ID09IDApIHRLZXkgPSAodGhpcy51W2tleV0udmFsdWVbMF0pID8gMCA6ICd4JztcbiAgICBlbHNlIGlmIChpbmRleCA9PSAxKSB0S2V5ID0gKHRoaXMudVtrZXldLnZhbHVlWzFdKSA/IDEgOiAneSc7XG4gICAgZWxzZSBpZiAoaW5kZXggPT0gMikgdEtleSA9ICh0aGlzLnVba2V5XS52YWx1ZVsyXSkgPyAyIDogJ3onO1xuXG4gICAgY29uc3QgbyA9IHRoaXMuc2V0T3BzKGtleSwgdGhpcy51W2tleV0udmFsdWVbdEtleV0pO1xuICAgIGNvbnN0IG5hbWVBcnIgPSBbJ3gnLCAneScsICd6J107XG4gICAgdGhpcy5mLmFkZCh0aGlzLnVba2V5XS52YWx1ZSwgdEtleSwgby5taW4sIG8ubWF4KVxuICAgIC5zdGVwKG8uc3RlcClcbiAgICAubmFtZShvLm5hbWUgKyAnXycgKyBuYW1lQXJyW2luZGV4XSlcbiAgICAub25DaGFuZ2UoKCk9PiB7XG4gICAgICB0aGlzLmNoYW5nZU1ldGhvZCgpO1xuICAgIH0pO1xuICB9LFxuXG4gIHZhbGlkYXRpb246IGZ1bmN0aW9uKG9wKSB7XG4gICAgaWYgKG9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChvcC52aXNpYmxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChvcC5tYXggPCBvcC5taW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiBvcHRpb25zIG1heCA8IG1pbi4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3AubWF4IDwgb3Auc3RlcCkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6IG9wdGlvbnMgbWF4IDwgc3RlcC4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbn1cblxuZXhwb3J0IHsgVW5pZm9ybXMgfTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Q0FBQSxTQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLFlBQVksR0FBRyxJQUFJLEVBQUU7Q0FDM0UsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztDQUNwQixFQUFFLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxZQUFZLElBQUksSUFBSSxJQUFJLFdBQVcsRUFBRSxHQUFHLFlBQVksQ0FBQzs7Q0FFNUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDL0IsRUFBRSxJQUFJLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDOztDQUU1QixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDekMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0NBQ1osR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0NBQ2hCLEdBQUcsUUFBUSxDQUFDLEtBQUs7Q0FDakIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDeEIsR0FBRyxDQUFDLENBQUM7Q0FDTCxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7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LFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUM7Q0FDeEMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3RCLFFBQVEsTUFBTTtDQUNkLE9BQU8sQUFBQztDQUNSLE1BQU0sS0FBSyxHQUFHLEVBQUU7Q0FDaEIsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbkQsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUN2RCxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0NBQzFELFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7Q0FDMUQsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztDQUMxRCxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDO0NBQzlDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Q0FDckIsU0FBUyxRQUFRLENBQUMsS0FBSztDQUN2QixVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHO0NBQzlCLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHO0NBQ3pDLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHO0NBQ3pDLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHO0NBQ3pDLFdBQVcsQ0FBQztDQUNaLFVBQVUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzlCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNO0NBQ2QsT0FBTyxBQUFDO0NBQ1IsTUFBTSxLQUFLLElBQUksRUFBRTtDQUNqQixRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQy9CLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDL0IsUUFBUSxNQUFNO0NBQ2QsT0FBTyxBQUFDO0NBQ1IsTUFBTSxLQUFLLElBQUksRUFBRTtDQUNqQixRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQy9CLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDL0IsUUFBUSxJQUFJLENBQUMsU0FBUyxD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RyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUc7Q0FDM0QsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLFNBQVMsSUFBSSxLQUFLLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHO0NBQzFELE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJO0NBQ3JELE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJO0NBQ3JELE1BQU0sTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNO0NBQzVELEtBQUssQ0FBQztDQUNOLEdBQUc7O0NBRUgsRUFBRSxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFO0NBQ2xDLElBQUksSUFBSSxJQUFJLENBQUM7Q0FDYixJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0NBQzVELFNBQVMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7Q0FDakUsU0FBUyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQzs7Q0FFakUsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQ3hELElBQUksTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ3BDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztDQUNyRCxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQ2pCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN4QyxLQUFLLFFBQVEsQ0FBQyxLQUFLO0NBQ25CLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzFCLEtBQUssQ0FBQyxDQUFDO0NBQ1AsR0FBRzs7Q0FFSCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRTtDQUMzQixJQUFJLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtDQUMxQixNQUFNLE9BQU8sSUFBSSxDQUFDO0NBQ2xCLEtBQUs7O0NBRUwsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO0NBQzlCLE1BQU0sT0FBTyxLQUFLLENBQUM7Q0FDbkIsS0FBSzs7Q0FFTCxJQUFJLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFO0NBQ3pCLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0NBQ2pELE1BQU0sT0FBTyxLQUFLLENBQUM7Q0FDbkIsS0FBSzs7Q0FFTCxJQUFJLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFO0NBQzFCLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0NBQ2xELE1BQU0sT0FBTyxLQUFLLENBQUM7Q0FDbkIsS0FBSzs7Q0FFTCxJQUFJLE9BQU8sSUFBSSxDQUFDO0NBQ2hCLEdBQUc7Q0FDSCxDQUFDOzs7Ozs7Ozs7Ozs7OyJ9
